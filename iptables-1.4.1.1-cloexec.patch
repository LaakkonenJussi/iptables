diff -up iptables-1.4.1.1/extensions/libipt_realm.c.cloexec iptables-1.4.1.1/extensions/libipt_realm.c
--- iptables-1.4.1.1/extensions/libipt_realm.c.cloexec	2008-06-16 15:12:40.000000000 +0200
+++ iptables-1.4.1.1/extensions/libipt_realm.c	2008-07-22 16:46:21.000000000 +0200
@@ -50,7 +50,7 @@ static void load_realms(void)
 	int id;
 	struct realmname *oldnm = NULL, *newnm = NULL;
 
-	fil = fopen(rfnm, "r");
+	fil = fopen(rfnm, "re");
 	if (!fil) {
 		rdberr = 1;
 		return;
@@ -256,7 +256,7 @@ static struct xtables_match realm_mt_reg
 	.extra_opts	= realm_opts,
 };
 
-void _init(void)
+void __attribute((constructor)) nf_ext_init(void)
 {
 	xtables_register_match(&realm_mt_reg);
 }
diff -up iptables-1.4.1.1/ip6tables-restore.c.cloexec iptables-1.4.1.1/ip6tables-restore.c
--- iptables-1.4.1.1/ip6tables-restore.c.cloexec	2008-06-16 15:12:40.000000000 +0200
+++ iptables-1.4.1.1/ip6tables-restore.c	2008-07-22 16:46:21.000000000 +0200
@@ -172,7 +172,7 @@ int main(int argc, char *argv[])
 	}
 
 	if (optind == argc - 1) {
-		in = fopen(argv[optind], "r");
+		in = fopen(argv[optind], "re");
 		if (!in) {
 			fprintf(stderr, "Can't open %s: %s\n", argv[optind],
 				strerror(errno));
diff -up iptables-1.4.1.1/ip6tables-save.c.cloexec iptables-1.4.1.1/ip6tables-save.c
--- iptables-1.4.1.1/ip6tables-save.c.cloexec	2008-06-16 15:12:40.000000000 +0200
+++ iptables-1.4.1.1/ip6tables-save.c	2008-07-22 16:46:21.000000000 +0200
@@ -40,7 +40,7 @@ static int for_each_table(int (*func)(co
 	FILE *procfile = NULL;
 	char tablename[IP6T_TABLE_MAXNAMELEN+1];
 
-	procfile = fopen("/proc/net/ip6_tables_names", "r");
+	procfile = fopen("/proc/net/ip6_tables_names", "re");
 	if (!procfile)
 		exit_error(OTHER_PROBLEM,
 			   "Unable to open /proc/net/ip6_tables_names: %s\n",
diff -up iptables-1.4.1.1/iptables-restore.c.cloexec iptables-1.4.1.1/iptables-restore.c
--- iptables-1.4.1.1/iptables-restore.c.cloexec	2008-06-16 15:12:40.000000000 +0200
+++ iptables-1.4.1.1/iptables-restore.c	2008-07-22 16:46:21.000000000 +0200
@@ -176,7 +176,7 @@ main(int argc, char *argv[])
 	}
 
 	if (optind == argc - 1) {
-		in = fopen(argv[optind], "r");
+		in = fopen(argv[optind], "re");
 		if (!in) {
 			fprintf(stderr, "Can't open %s: %s\n", argv[optind],
 				strerror(errno));
diff -up iptables-1.4.1.1/iptables-save.c.cloexec iptables-1.4.1.1/iptables-save.c
--- iptables-1.4.1.1/iptables-save.c.cloexec	2008-06-16 15:12:40.000000000 +0200
+++ iptables-1.4.1.1/iptables-save.c	2008-07-22 16:46:21.000000000 +0200
@@ -38,7 +38,7 @@ static int for_each_table(int (*func)(co
 	FILE *procfile = NULL;
 	char tablename[IPT_TABLE_MAXNAMELEN+1];
 
-	procfile = fopen("/proc/net/ip_tables_names", "r");
+	procfile = fopen("/proc/net/ip_tables_names", "re");
 	if (!procfile)
 		exit_error(OTHER_PROBLEM,
 			   "Unable to open /proc/net/ip_tables_names: %s\n",
diff -up iptables-1.4.1.1/iptables-xml.c.cloexec iptables-1.4.1.1/iptables-xml.c
--- iptables-1.4.1.1/iptables-xml.c.cloexec	2008-06-16 15:12:40.000000000 +0200
+++ iptables-1.4.1.1/iptables-xml.c	2008-07-22 16:46:21.000000000 +0200
@@ -664,7 +664,7 @@ main(int argc, char *argv[])
 	}
 
 	if (optind == argc - 1) {
-		in = fopen(argv[optind], "r");
+		in = fopen(argv[optind], "re");
 		if (!in) {
 			fprintf(stderr, "Can't open %s: %s", argv[optind],
 				strerror(errno));
diff -up iptables-1.4.1.1/xtables.c.cloexec iptables-1.4.1.1/xtables.c
--- iptables-1.4.1.1/xtables.c.cloexec	2008-06-16 15:12:40.000000000 +0200
+++ iptables-1.4.1.1/xtables.c	2008-07-22 16:47:23.000000000 +0200
@@ -285,6 +285,12 @@ static char *get_modprobe(void)
 	if (procfile < 0)
 		return NULL;
 
+ 	if (fcntl(procfile, F_SETFD, FD_CLOEXEC) == -1) {
+ 		fprintf(stderr, "Could not set close on exec: %s\n",
+ 			strerror(errno));
+ 		exit(1);
+ 	}
+
 	ret = malloc(PROCFILE_BUFSIZ);
 	if (ret) {
 		memset(ret, 0, PROCFILE_BUFSIZ);
@@ -680,6 +686,12 @@ static int compatible_revision(const cha
 		exit(1);
 	}
 
+ 	if (fcntl(sockfd, F_SETFD, FD_CLOEXEC) == -1) {
+ 		fprintf(stderr, "Could not set close on exec: %s\n",
+ 			strerror(errno));
+ 		exit(1);
+ 	}
+
 	xtables_load_ko(xtables_modprobe_program, true);
 
 	strcpy(rev.name, name);
